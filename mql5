
//+------------------------------------------------------------------+
//|              Crypto Suite EA MT5                                   |
//|              Developer's Site: forexroboteasy.com                  |
//|              Development by: Forex Robot Easy Team                 |
//|------------------------------------------------------------------|
//| This Expert Advisor (EA) is designed to trade cryptocurrencies   |
//| based on a unique trading strategy. It focuses on long trades in  |
//| the cryptocurrency market, utilizing technical indicators.         |
//| It trades during high volatility and momentum periods, taking      |
//| advantage of the long-term upward trend in the market.             |
//| The EA does not trade during market dips or crashes.               |
//|------------------------------------------------------------------|
//| This code is developed adhering to best coding practices and is   |
//| well-documented for readability and ease of future modifications.  |
//+------------------------------------------------------------------+

// Include necessary libraries
#include <Trade\Trade.mqh>
#include <MovingAverages\MovingAverages.mqh>
#include <CCI\CCI.mqh>
#include <Stochastic\Stochastic.mqh>

// Define input parameters
input double lotSize = 0.01; // Lot size for trading
input int stopLoss = 100; // Stop loss in points
input int takeProfit = 200; // Take profit in points

// Define technical indicators
CMovingAverages ma;
CCCI cci;
CStochastic stochastic;

// Define trading function
void TradeCrypto()
{
   // Check market volatility, momentum, and trend using technical indicators
   double maValue = ma.iMA(_Symbol, 0, 14, 0, MODE_EMA, PRICE_CLOSE, 0); // Moving average
   double cciValue = cci.iCCI(_Symbol, 0, 14, PRICE_TYPICAL, 0); // CCI
   double stochasticValue = stochastic.iStochastic(_Symbol, 0, 14, 3, 3, MODE_EMA, STO_LOWHIGH, 0); // Stochastic
   
   // Determine if market conditions are suitable for trading
   bool isHighVolatility = (MarketInfo(_Symbol, MODE_VOLATILITY) > 1.5); // Check market volatility
   bool isMomentumUp = (maValue > maValue[1] && cciValue > 0 && stochasticValue > 50); // Check momentum and trend
   
   // Place buy order if market conditions are met
   if (isHighVolatility && isMomentumUp)
   {
      double stopLossPrice = NormalizeDouble(Bid - stopLoss * _Point, _Digits);
      double takeProfitPrice = NormalizeDouble(Bid + takeProfit * _Point, _Digits);
      
      // Open a long position
      bool isTradeOpened = OrderSend(_Symbol, OP_BUY, lotSize, Bid, 10, stopLossPrice, takeProfitPrice);
      
      if (isTradeOpened)
      {
         Print('Buy order placed successfully!');
      }
      else
      {
         Print('Failed to place buy order. Error code: ', GetLastError());
      }
   }
}

// OnInit function
void OnInit()
{
   // Initialize technical indicators
   ma.Create();
   cci.Create();
   stochastic.Create();
   
   // Set indicator parameters
   ma.SetInputParameter(0, 14);
   ma.SetInputParameter(1, MODE_EMA);
   ma.SetInputParameter(2, PRICE_CLOSE);
   
   cci.SetInputParameter(0, 14);
   cci.SetInputParameter(1, PRICE_TYPICAL);
   
   stochastic.SetInputParameter(0, 14);
   stochastic.SetInputParameter(1, 3);
   stochastic.SetInputParameter(2, 3);
   stochastic.SetInputParameter(3, MODE_EMA);
   stochastic.SetInputParameter(4, STO_LOWHIGH);
}

// OnTick function
void OnTick()
{
   // Call trading function on each tick
   TradeCrypto();
}

// OnDeinit function
void OnDeinit(const int reason)
{
   // Clean up resources
   ma.Destroy();
   cci.Destroy();
   stochastic.Destroy();
}
